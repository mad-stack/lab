
USP LAB:
PART A: Os
1.	Round Robin
#include <stdio.h>

int main()
{
int n=4,remain=n;
int processNo,elapsedTime,flag=0,timeQuantum=4;
int totalWaitTime=0,totalTurnAroundTime=0;
int arrivalTime[10]={0,2,2,3};
int burstTime[10]={7,3,8,4};
int remainingTime[10]={7,3,8,4};
printf("\n Process|Turnaround time | Waiting time\n");
for(elapsedTime=0,processNo=0;remain!=0;)
    {
if(remainingTime[processNo]>0)
        {
if(remainingTime[processNo]<=timeQuantum)
            {
elapsedTime+=remainingTime[processNo];
remainingTime[processNo]=0;
flag=1;
remain--;
            }
else
            {
remainingTime[processNo]-=timeQuantum;
elapsedTime+=timeQuantum;
            }
        }
if(remainingTime[processNo]==0&&flag==1)
        {
printf("p[%d]\t|\t%d\t|\t%d\n",processNo,elapsedTime-arrivalTime[processNo],elapsedTime-arrivalTime[processNo]-burstTime[processNo]);
totalTurnAroundTime+=elapsedTime-arrivalTime[processNo];
totalWaitTime+=elapsedTime-arrivalTime[processNo]-burstTime[processNo];
flag=0;
        }
if(processNo==n-1)
processNo=0;
else if(arrivalTime[processNo+1]<=elapsedTime)
processNo++;
else
processNo=0;
    }
printf("\n Average turnaround time=%f\n",totalTurnAroundTime*1.0/n);
printf("\nAverage waiting time=%f",totalWaitTime*1.0/n);
return 0;
}


2.Fragmentation
#include<stdio.h>
#include<stdlib.h>

void display(int,int[10]);
void firstfit(int,int[10],int[10],int);
void bestfit(int,int[10],int[10],int);
void worstfit(int,int[10],int[10],int);

int main(int argc,char**argv)
{
int npr,nh=0,i,pr[10],hol[10],ch,temp[10];
do
{
printf("\n\n -------MENU-------\n 1.INPUT" "\n2.FIRST FIT \n3.BEST FIT""\n4.WORST FIT \n 5.EXIT\n\nENTER YOUR CHOICE:");
scanf("%d",&ch);
for(i=0;i<nh;i++)
temp[i]=hol[i];
switch(ch)
{
case 1:printf("\n Enter the no of process ");
scanf("%d",&npr);
printf("\n no of hole");
scanf("%d",&nh);

for(i=0;i<npr;i++)
{

printf("\n process %d",i+1);
scanf("%d",&pr[i]);
}

for(i=0;i<nh;i++)
{
printf("\n hole  %d",i+1);
scanf("%d",&hol[i]);
temp[i]=hol[i];
}
break;

case 2:firstfit(npr,temp,pr,nh);
break;

case 3:bestfit(npr,temp,pr,nh);
break;
case 4:worstfit(npr,temp,pr,nh);
break;
case 5:exit(0);
//break;
default:printf("\n wrong choice ");
}
}
while(ch!=5);
return 0;
}

void firstfit(int npr,int hol[10],int pr[10],int nh)
{
int i,j,k,flag=0;
for(i=0;i<npr;i++)
{
flag=0;
for(j=0;j<nh;j++)
{
if(pr[i]<hol[j])
{
hol[j]=hol[j]-pr[i];
printf("\n memory is allocated to process %d:(%d)",i+1,pr[i]);
flag=1;
break;
}
else if(pr[i]==hol[j])
{
flag=1;
printf("\n memory is allocated to process %d:(%d)",i+1,pr[i]);
for(k=j;k<nh-1;k++)
{
hol[k]=hol[k+1];
}
nh--;
break;
}
}
if(flag==0)
{
printf("\n Hole is not available..");
break;
}
display(nh,hol);
}
}

void bestfit(int npr,int hol[10],int pr[10],int nh)
{
int i,j,k,flag,min;
for(i=0;i<npr;i++)
{
flag=0;
for(j=0;j<nh;j++)
{
if(pr[i]<=hol[j])
{
flag=1,min=j;
for(k=0;k<nh;k++)
{
if(hol[min]>hol[k]&&(pr[i]<=hol[k]))
min=k;
}
if(pr[i]<hol[min])
{
printf("\n memory is allocated to process %d:(%d)",i+1,pr[i]);
hol[min]=hol[min]-pr[i];
break;

}
else if(pr[i]==hol[min])
{

printf("\n memory is allocated to process %d:(%d)",i+1,pr[i]);
for(k=min;k<nh-1;k++)

hol[k]=hol[k+1];

nh--;
break;
}
}
if(flag==0)
{
printf("\n Hole is not available..");
break;
}
display(nh,hol);
}
}
}

void worstfit(int npr,int hol[10],int pr[10],int nh)
{
int i,j,k,max,flag;
for(i=0;i<npr;i++)

flag=0;
for(j=0;j<nh;j++)
{
if(pr[i]<=hol[j])
{

printf("\n memory is allocated to process %d:(%d)",i+1,pr[i]);
flag=1;max=j;

for(k=j;k<nh;k++)
{
if(hol[max]<hol[k]&&(pr[i]<=hol[k]))
max=k;
}
if(pr[i]<hol[max])
{
//printf("\n cpu is allocated for process %d",i+1);
hol[max]=hol[max]-pr[i];
break;
}
else if(pr[i]==hol[max])
{
//printf("\n cpu is allocated for process %d",i+1);
for(k=max;k<nh-1;k++)
hol[k]=hol[k+1];
nh--;
break;
}
}
}
if(flag==0)
{
printf("\n Hole is not available..");
//break;
}
display(nh,hol);
}


void display(int nh,int hol[10])
{
printf("\n Holes ");
int i=0;
for(i=0;i<nh;i++)
{
printf("%d\t",hol[i]);
}
}



3.bankers algorithm
#include <stdio.h>
#include <stdlib.h>

int main()
{
int process=5, resource=3;
int i, j, k=0, count1=0, count2=0;
int avail[3]={1, 0, 2};
int max[5][3]={0, 0, 4, 2, 0, 1, 1, 3, 7, 8, 4, 2, 1, 5, 7};
int allot[5][3]={0, 0, 2, 1, 0, 0, 1, 3, 5, 6, 3, 2, 1, 4, 3};
int need[5][3];
int complete[5]={0};

for(i=0;i<process;i++)
for(j=0;j<resource;j++)
need[i][j]=max[i][j]-allot[i][j];

printf("\nPossible Sequence: \n");
while(count1!=process)
    {
        count2=count1;
for(i=0;i<process;i++)
        {
            k=0;
for(j=0;j<resource;j++)
            {
if(need[i][j]<=avail[j])
k++;
            }

if(k==resource && complete[i]==0)
            {
printf("\t p[%d]", i);
complete[i]=1;

for(j=0;j<resource;j++)
                {
avail[j]=avail[j]+allot[i][j];
                }
count1++;
            }
        }
if(count1==count2)
        {
printf("\nStop.....After this...Deadlock\n");
                /*for(i=0;i<process;i++){
for(j=0;j<resource;j++)
printf("%d\t",max[i][j]);
printf("\n");}
printf("\nAllocation");
for(i=0;i<process;i++){
for(j=0;j<resource;j++)
printf("%d\t",allot[i][j]);
printf("\n");}
printf("\nNeed");
for(i=0;i<process;i++){
for(j=0;j<resource;j++)
printf("%d\t",need[i][j]);
printf("\n");}
printf("\nSafe Sequence exists\n");
printf("\nStop...After this ...Deadlock");
return 0;
         }
    }
    ("\nMaximum");
for(i=0;i<process;i++){
for(j=0;j<resource;j++)
printf("%d\t",max[i][j]);
printf("\n");}
printf("\nAllocation");
for(i=0;i<process;i++){
for(j=0;j<resource;j++)
printf("%d\t",allot[i][j]);
printf("\n");}
printf("\nNeed");printf
for(i=0;i<process;i++){
for(j=0;j<resource;j++)
printf("%d\t",need[i][j]);
printf("\n");}
printf("\nSafe Sequence exists\n");*/
return 0;
        }
    }
return 0;
}




4.word processor

Excel.c
#include<stdio.h>
#include<sys/ipc.h>
#include<sys/sem.h>
#include<stdio.h>
#include<errno.h>
#include<unistd.h>
#include<stdlib.h>
#define PERMS 0666
#define PRINTERKEY 654321L
int main()
{
int semid=semget(PRINTERKEY,1,IPC_EXCL);
setbuf(stdout,NULL);
struct sembuf semBufVar;
semBufVar.sem_num=0;
semBufVar.sem_op=-1;
semBufVar.sem_flg=SEM_UNDO;
printf("\n excel process requested printer resource on-");
system("date");
if(semop(semid,&semBufVar,1)!=-1)
{
printf("\n Printer allocated to excel on");
system("date");
printf("\n excel process Using resource ");
sleep(10);
}
semBufVar.sem_op=+1;
printf("\n\n Printer resource releases by excel process on -");
system("date");
semop(semid,&semBufVar,1);
return 0;
}


Print.c
#include<stdio.h>
#include<sys/ipc.h>
#include<sys/sem.h>
#define PERMS 0666
#define PRINTERKEY 654321L
int main()
{
int semid=semget(PRINTERKEY,1,IPC_CREAT|PERMS);
int status=semctl(semid,0,SETVAL,1);
return 0;
}


Word.c
#include<stdio.h>
#include<sys/ipc.h>
#include<sys/sem.h>
#include<stdio.h>
#include<errno.h>
#include<unistd.h>
#include<stdlib.h>
#define PERMS 0666
#define PRINTERKEY 654321L
int main()
{
int semid=semget(PRINTERKEY,1,IPC_EXCL);
setbuf(stdout,NULL);
struct sembuf semBufVar;
semBufVar.sem_num=0;
semBufVar.sem_op=-1;
semBufVar.sem_flg=SEM_UNDO;
printf("\n Word process requested printer resource on-");
system("date");
if(semop(semid,&semBufVar,1)!=-1)
{
printf("\n Printer allocated to word process on");
system("date");
printf("\n Word process Using resource ");
sleep(10);
}
semBufVar.sem_op=+1;
printf("\n\n Printer resource releases by word process on -");
system("date");
semop(semid,&semBufVar,1);
return 0;
}




5.pagefaults



#include <stdio.h>
#include <stdlib.h>
int referenceString[]={1,2,3,4,1,2,5,1,2,3,4,5};
int lengthOfReferenceString=sizeof(referenceString)/sizeof(int);
int pagePresentInFrames;
int pageFaults,i,j,k,m;

void printPagesInFrames(int frame[],int numberOfFrames)
{

for(m=0;m<numberOfFrames;m++)
printf("\t %d",frame[m]);

}


int findIndexOfLeastRecentlyUsed(int lruCounter[],int numberOfFrames)
{
		int lruValue=-1;
		int indexOfLRU=0;

		for(m=0;m<numberOfFrames;m++)
		
		if(lruCounter[m]==-1)
		
		return i;
		
		else if(lruCounter[m]>lruValue)
		{
		lruValue=lruCounter[m];
		
		indexOfLRU=m;
		}
		return indexOfLRU;
}

void fifoPageReplacement(int numberOfFrames)
{
int frame[5]={-1,-1,-1,-1,-1};
pageFaults=0;
j=0;
printf("\n FIFO page replacement using %d Frames ,initial Frames=",numberOfFrames);
printPagesInFrames(frame,numberOfFrames);

printf("\n Page in reference String  Pages in Frames");
for(i=0;i<lengthOfReferenceString;i++)
{
printf("\n   %d    ",referenceString[i]);
pagePresentInFrames=0;
for(k=0;k<numberOfFrames;k++)
if(frame[k]==referenceString[i])

pagePresentInFrames=1;

if(pagePresentInFrames==0)
{
	frame[j]=referenceString[i];
j=(j+1)%numberOfFrames;
pageFaults++;
printPagesInFrames(frame,numberOfFrames);
}

}
printf("\n Page Faults are =%d\n",pageFaults);

}

void lruPageReplacement(int numberOfFrames)
{
int lruCounter[5]={-1,-1,-1,-1,-1};
int frame[5]={-1,-1,-1,-1,-1};
pageFaults=0;

printf("\n LRU page replacement using %d Frames ,initial Frames=",numberOfFrames);
printPagesInFrames(frame,numberOfFrames);

printf("\n Page in reference String  Pages in Frames");
for(i=0;i<lengthOfReferenceString;i++)
{
printf("\n   %d    ",referenceString[i]);
pagePresentInFrames=0;
for(k=0;k<numberOfFrames;k++)
if(frame[k]==referenceString[i])
{
pagePresentInFrames=1;
lruCounter[k]=0;
}
else if(lruCounter[k]!=-1)
lruCounter[k]++;
if(pagePresentInFrames==0)
{
j=findIndexOfLeastRecentlyUsed(lruCounter,numberOfFrames);
	frame[j]=referenceString[i];
lruCounter[j]=0;

pageFaults++;
printPagesInFrames(frame,numberOfFrames);
}
}
printf("\n page Faultsa are =%d\n",pageFaults);
}

int main()
{
printf("Reference String=");
for(i=0;i<lengthOfReferenceString;i++)
printf("%d",referenceString[i]);

fifoPageReplacement(4);
lruPageReplacement(4);


return 0;
}




Part B:Usp

1.compile n run time
#define _POSIX_SOURCE
#define _POSIX_C_SOURCE 199309L
#include<stdio.h>
#include<unistd.h>
#include<iostream>
using namespace std;

int main()
{
int c,res;
cout<<" enter for the compile time 1,run time 2"<<endl;
cin>>c ;
switch(c)
{
case 1: 
#ifdef _POSIX_CHILD_MAX
cout<<" the no of child processes "<<_POSIX_CHILD_MAX<<endl;
#endif
#ifdef _POSIX_PATH_MAX
cout<<" Max PAth length "<<_POSIX_PATH_MAX<<endl;
#endif

#ifdef _POSIX_NAME_MAX
cout<<" the maximun no of char in a file name "<<_POSIX_NAME_MAX
<<endl;
#endif

#ifdef _POSIX_OPEN_MAX
cout<<" the max no of open files per process "<< _POSIX_OPEN_MAX
<<endl;
#endif

break;

case 2:
if(res=sysconf(_SC_CLK_TCK))
cout<<" the no OF CLOCK TICKS ARE "<<res <<endl;
if(res=pathconf("/",_PC_PATH_MAX))
cout<<" the no OF MAX LENGTH "<<res<<endl;

if(res=pathconf("/",_PC_PATH_MAX))
cout<<" the no OF char is file name"<<res<<endl;

if(res=sysconf(_SC_OPEN_MAX))
cout<<" the no of open files per process "<<res<<endl;

}
return 0;
}
2.race condition




#include <stdio.h>
#include <stdlib.h>

main()
{
pid_t pid;
pid=fork();
if(pid<0)
{
printf("Fork Error \n");
}
if(pid==0)
{
charatatime("i am child process \n");

}else
{
charatatime("i am parent process \n");
}
}

Static void charatatime(char *str)
{
char *ptr;
int c;
setbuf(stdout,NULL);
for(ptr=str;(c=*ptr++)!=0;)
putc(c,stdout);
}

3.resource leak(zombie)




#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>

int main()
{
pid_t pid;
if((pid=fork())<0)
perror("forkerror");
else if(pid==0)
_exit(0);
sleep(4);
system("ps -o pid,ppid,state,tty,command");
//tty- Print the file name of the terminal connected to standard input.
//ps-The ps command reports information on current running processes, outputting to standard output.
_exit(0);



}


4.locked

 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <fcntl.h>
 #include <errno.h>
 int main(int argc,char *argv[])
 {
        int fd;
        char buffer[255];
        struct flock fvar;
        if(argc==1)
        {
                printf("usage: %s filename\n",argv[0]);
                return -1;
        }
        if((fd=open(argv[1],O_RDWR))==-1)
        {
                perror("open");
                exit(1);
        }
        fvar.l_type=F_WRLCK;
        fvar.l_whence=SEEK_END;
        fvar.l_start=SEEK_END-100;
        fvar.l_len=100;
        printf("press enter to set lock\n");
        getchar();
        printf("trying to get lock..\n");
        if((fcntl(fd,F_SETLK,&fvar))==-1)
        {     fcntl(fd,F_GETLK,&fvar);
              printf("\nFile already locked by process (pid):    \t%d\n",fvar.l_pid);        
              return -1;        
        }
        printf("locked\n");
        if((lseek(fd,SEEK_END-50,SEEK_END))==-1)
        {
                perror("lseek");
                exit(1);
        }
        if((read(fd,buffer,100))==-1)
        {
                perror("read");
                exit(1);
        }
        printf("data read from file..\n");
        puts(buffer);
        printf("press enter to release lock\n");
        getchar();
        fvar.l_type = F_UNLCK;
        fvar.l_whence = SEEK_SET;
        fvar.l_start = 0;
        fvar.l_len = 0;
        if((fcntl(fd,F_UNLCK,&fvar))==-1)
        {
                perror("fcntl");
                exit(0);
        }
        printf("Unlocked\n");
        close(fd);
        return 0;
 }



}


5.inter process communication(client server)
Client:
#include<stdio.h>
#include<unistd.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<string.h>
#define FIFO1 "fifo1"
#define FIFO2 "fifo2"
#define PERMS 0666
char fname[256];
int main()
{
	int readfd,writefd;
	ssize_t n;
	char buff[512];
	
	printf("Trying to Connect to Server..\n");
	
	writefd=open(FIFO1,O_WRONLY,0);
	readfd=open(FIFO2,O_RDONLY,0);
	printf("Connected...\n");
	
	printf("Enter the filename to request from server:");
	scanf("%s",fname);
	write(writefd,fname,strlen(fname));

	printf("Waiting for Server to reply..\n");
	while((n=read(readfd,buff,512))>0) //Read 515 bytes of data contents which is pointed by readfd into FIFO2 buff
	
	write(1,buff,n);
	close(readfd);
	close(writefd);
	return 0;
}

Server:

#include<stdio.h>
#include<unistd.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<string.h>
#define FIFO1 "fifo1"
#define FIFO2 "fifo2"
#define PERMS 0666
char fname[256];
int main()
{
	int readfd,writefd,fd;
	ssize_t n;
	char buff[512];
	
	if(mkfifo(FIFO1,PERMS)<0)
		printf("Cant Create FIFO Files\n");
	if(mkfifo(FIFO2,PERMS)<0)
		printf("Cant Create FIFO Files\n");
	printf("Waiting for connection Request...\n");
	readfd=open(FIFO1,O_RDONLY,0);
	writefd=open(FIFO2,O_WRONLY,0);
	printf("Connection Established...\n");
	read(readfd,fname,255);
	printf("Client has requested file %s\n",fname);
	
	if((fd=open(fname,O_RDWR))<0)
	{
		strcpy(buff,"File does not exist..\n");
		write(writefd,buff,strlen(buff));
	}
	else
	{
		while((n=read(fd,buff,512))>0)
		write(writefd,buff,n);
	}
	close(readfd);unlink(FIFO1);
	close(writefd);unlink(FIFO2);
}




other one
Server:
#include<stdio.h>
#include<unistd.h>
#include<fcntl.h> /*used for file handling*/
#include<sys/stat.h> /*used for mkfifo function*/
#include<sys/types.h> /*when compiled in gcc, mkfifo() has dependency on both types.h and stat.h*/

intmain()
{
charfname[50], buffer[1025];
intreq, res, n, file;
mkfifo("req.fifo", 0777);
mkfifo("res.fifo", 0777);
printf("Waiting for request...\n");
req = open("req.fifo", O_RDONLY);
    res = open("res.fifo", O_WRONLY);
    read(req, fname, sizeof(fname));
printf("Received request for %s\n", fname);
    file = open(fname, O_RDONLY);
if (file <0)
        write(res, "File not found\n", 15);
else {
while((n = read(file, buffer, sizeof(buffer))) >0) {
            write(res, buffer, n);
        }
    }
    close(req);
    close(res);
    unlink("req.fifo");
    unlink("res.fifo");
return0;
}
Client :
#include<stdio.h>
#include<unistd.h> 
#include<stdlib.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<sys/types.h>

Int main()
{
charfname[50], buffer[1025];
intreq, res, n;
req = open("req.fifo", O_WRONLY);
    res = open("res.fifo", O_RDONLY);
if(req<0 || res <0) {
printf("Please Start the server first\n");
exit(-1);
    }
printf("Enter filename to request:\n");
scanf("%s", fname);
    write(req, fname, sizeof(fname));
printf("Received response\n");
while((n = read(res, buffer, sizeof(buffer)))>0) {
        write(1, buffer, n);
    }
    close(req);
    close(res);
return0;
}




